set previewer ~/.config/lf/preview
map i $~/.config/lf/preview $f | less -R
# interpreter for shell commands (needs to be POSIX compatible)
set shell bash

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10
set drawbox on
# use enter for shell commands
map <enter> open

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o $rifle $f
map O $rifle -l $f; read -p "#>" rprog; rifle -p $rprog $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid rifle $f > /dev/null 2> /dev/null & done;;
    esac
    }}


map <delete> delete



cmd man $man "$@"
cmd aprop $man $(apropos ""|fzf|cut -f 1 -d \ )

cmd ln ${{for file in $(lf -remote load|sed '1d')
	do
	  ln ${1:--P} $file
	done
	lf -remote 'send load'
	lf -remote 'send clear'
	}}

cmd locate ${{dir=$(locate ${1}|fzf)
		dir=${dir%/*}
	     	lf -remote "send cd $dir"
	    }}

cmd grepvim ${{file=$(grep ${1} *|fzf)
		file=${file%:*}
		vim $file
	     }}			
cmd audio $ffmpeg -i $f  -q:a 0 -map a $f.mp3

cmd weather $curl -4 wttr.in/69089|less
cmd lsport !netstat -tupln

cmd toclip $cat $f|xclip -i
cmd tosel $cat $f|xclip -i -sel clip

cmd zip $zip -r $f.zip $f
cmd 7zzip $7z a -tzip -r $f.zip $f
map p
map pp paste
map ph ln
map ps ln -s
map pr ln -sr



map =d %du -sh $f 2>/dev/null
map =f %df -h $(pwd)
map =a !df -h
map =m !free
map =h $htop
map =t %file -b --mime-type --mime-encoding $f
map == %file -b $f

#imageview
map <c-v> &${HOME}/.config/lf/imageview ${f}

cmd toggleimageview ${{if [[ -e "/tmp/lf${USER}imageview${id}" ]]
		     then
			 rm -f /tmp/lf${USER}imageview${id}
		     else
			 touch /tmp/lf${USER}imageview${id}
	             fi
		   }}

cmd runimageview &{{if [[ -e "/tmp/lf${USER}imageview${id}" ]]
 		     then
			 		${HOME}/.config/lf/imageview ${f}
         fi
			 		   }}



map zi &lf --remote "send $id toggleimageview" ;lf --remote "send $id runimageview"
map <down> &lf --remote "send $id down" ;lf --remote "send $id runimageview"
map <up> &lf --remote "send $id up" ;lf --remote "send $id runimageview"
map <space> &lf --remote "send $id toggle" ;lf --remote "send $id down" ; lf --remote "send $id runimageview"
map <home> &lf --remote "send $id top" ;lf --remote "send $id runimageview"
map <end> &lf --remote "send $id bottom" ;lf --remote "send $id runimageview"
map <c-u> &lf --remote "send $id half-up" ;lf --remote "send $id runimageview"
map <c-d> &lf --remote "send $id half-down" ;lf --remote "send $id runimageview"
map <pgup> &lf --remote "send $id page-up" ;lf --remote "send $id runimageview"
map <pgdn> &lf --remote "send $id page-down" ;lf --remote "send $id runimageview"
cmd on-cd &lf --remote "send $id runimageview"

map <f-7> push $mkdir<space>  

