#!/bin/sh
IFS=$'\n'
FILE_PATH="${1}"         # Full path of the highlighted file
FILE_EXTENSION="${FILE_PATH##*.}"
FILE_EXTENSION_LOWER="${FILE_EXTENSION,,*}"
MIMETYPE="$(file --dereference --brief --mime-type -- "${FILE_PATH}" )"

handle_fallback() {
	case "$(file -b --mime-encoding   "${FILE_PATH}" )" in
          binary) file --dereference --brief  "${FILE_PATH}" && exit;;
	  *) highlight --out-format ansi "${FILE_PATH}" && exit;;
	esac
}

handle_extension() {
    case "${FILE_EXTENSION_LOWER}" in
        # Archive
        a|ace|alz|arc|arj|bz|bz2|cab|cpio|deb|gz|jar|lha|lz|lzh|lzma|lzo|\
        rpm|rz|t7z|tar|tbz|tbz2|tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z|zip)
	    	atool --list  "${FILE_PATH}" && exit || bsdtar --list --file "${FILE_PATH}" && exit;;
        rar) unrar lt -p-  "${FILE_PATH}" && exit;;
				7z) 7z l -p  "${FILE_PATH}" && exit;;
  			[1-8]) man  "${FILE_PATH}" |col -b && exit;;
				o) nm  "${FILE_PATH}"|less;;
				iso) iso-info --no-header -l "${FILE_PATH}" && exit;;
				doc) catdoc  "${FILE_PATH}"&& exit ;;
				docx) docx2txt  "${FILE_PATH}" - && exit || handle_fallback ;;
        csv) cat  "${FILE_PATH}" | sed s/,/\\n/g && exit;;
  			pdf) pdftotext -nopgbrk  "${FILE_PATH}"  - && exit|| exiftool "${FILE_PATH}" && exit;;
  			djvu) djvutxt "${FILE_PATH}" && exit;;
  			torrent) aria2c -S  "${FILE_PATH}" && exit;;
  			odt|ods|odp|sxw) odt2txt  "${FILE_PATH}" && exit || handle_fallback && exit;;
				epub) zip -sf "${FILE_PATH}" && exit || handle_fallback && exit;;
  			htm|html|xhtml) w3m -dump  "${FILE_PATH}" && exit || \
					lynx -dump  "${FILE_PATH}" && exit || \
    			elinks -dump  "${FILE_PATH}" && exit  || handle_fallback ;;
				bmp|jpg|jpeg|png|xpm) mediainfo  "${FILE_PATH}" && exit || \
					exiftool  "${FILE_PATH}" && exit;;
				wav|mp3|flac|m4a|wma|ape|ac3|og[agx]|spx|opus|as[fx]|flac)
	 				mediainfo   "${FILE_PATH}" && exit || exiftool  "${FILE_PATH}" && exit ;;
				avi|mp4|wmv|dat|3gp|ogv|mkv|mpg|mpeg|vob|fl[icv]|m2v|mov|webm|ts|mts|m4v|r[am]|qt|divx)
 					mediainfo  "${FILE_PATH}" && exit || exiftool  "${FILE_PATH}" && exit ;;
    esac
}




#handle_image() {
#    local mimetype="${1}"
#    case "${mimetype}" in
#        # SVG
#        # image/svg+xml)
#        #     convert "${FILE_PATH}" "${IMAGE_CACHE_PATH}" && exit 6
#        #     exit 1;;
#
#        # Image
#        image/*)
#            local orientation
#            orientation="$( identify -format '%[EXIF:Orientation]\n' -- "${FILE_PATH}" )"
#            # If orientation data is present and the image actually
#            # needs rotating ("1" means no rotation)...
#            if [[ -n "$orientation" && "$orientation" != 1 ]]; then
#                # ...auto-rotate the image according to the EXIF data.
#                convert -- "${FILE_PATH}" -auto-orient "${IMAGE_CACHE_PATH}" && exit 6
#            fi
#
#            # `w3mimgdisplay` will be called for all images (unless overriden as above),
#            # but might fail for unsupported types.
#            exit 7;;
#
#        # Video
#         video/*)
#             # Thumbnail
#             ffmpegthumbnailer -i "${FILE_PATH}" -o "${IMAGE_CACHE_PATH}" -s 0 && exit 6
#             exit 1;;
#        # PDF
#        # application/pdf)
#        #     pdftoppm -f 1 -l 1 \
#        #              -scale-to-x 1920 \
#        #              -scale-to-y -1 \
#        #              -singlefile \
#        #              -jpeg -tiffcompression jpeg \
#        #              -- "${FILE_PATH}" "${IMAGE_CACHE_PATH%.*}" \
#        #         && exit 6 || exit 1;;
#
#        # Preview archives using the first image inside.
#        # (Very useful for comic book collections for example.)
#        # application/zip|application/x-rar|application/x-7z-compressed|\
#        #     application/x-xz|application/x-bzip2|application/x-gzip|application/x-tar)
#        #     local fn=""; local fe=""
#        #     local zip=""; local rar=""; local tar=""; local bsd=""
#        #     case "${mimetype}" in
#        #         application/zip) zip=1 ;;
#        #         application/x-rar) rar=1 ;;
#        #         application/x-7z-compressed) ;;
#        #         *) tar=1 ;;
#        #     esac
#        #     { [ "$tar" ] && fn=$(tar --list --file "${FILE_PATH}"); } || \
#        #     { fn=$(bsdtar --list --file "${FILE_PATH}") && bsd=1 && tar=""; } || \
#        #     { [ "$rar" ] && fn=$(unrar lb -p- -- "${FILE_PATH}"); } || \
#        #     { [ "$zip" ] && fn=$(zipinfo -1 -- "${FILE_PATH}"); } || return
#        #
#        #     fn=$(echo "$fn" | python -c "import sys; import mimetypes as m; \
#        #             [ print(l, end='') for l in sys.stdin if \
#        #               (m.guess_type(l[:-1])[0] or '').startswith('image/') ]" |\
#        #         sort -V | head -n 1)
#        #     [ "$fn" = "" ] && return
#        #     [ "$bsd" ] && fn=$(printf '%b' "$fn")
#        #
#        #     [ "$tar" ] && tar --extract --to-stdout \
#        #         --file "${FILE_PATH}" -- "$fn" > "${IMAGE_CACHE_PATH}" && exit 6
#        #     fe=$(echo -n "$fn" | sed 's/[][*?\]/\\\0/g')
#        #     [ "$bsd" ] && bsdtar --extract --to-stdout \
#        #         --file "${FILE_PATH}" -- "$fe" > "${IMAGE_CACHE_PATH}" && exit 6
#        #     [ "$bsd" ] || [ "$tar" ] && rm -- "${IMAGE_CACHE_PATH}"
#        #     [ "$rar" ] && unrar p -p- -inul -- "${FILE_PATH}" "$fn" > \
#        #         "${IMAGE_CACHE_PATH}" && exit 6
#        #     [ "$zip" ] && unzip -pP "" -- "${FILE_PATH}" "$fe" > \
#        #         "${IMAGE_CACHE_PATH}" && exit 6
#        #     [ "$rar" ] || [ "$zip" ] && rm -- "${IMAGE_CACHE_PATH}"
#        #     ;;
#    esac
#}





handle_extension
handle_fallback
